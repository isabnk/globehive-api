// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String
  avatarUrl    String?
  createdAt    DateTime @default(now())

  posts      Post[]
  comments   Comment[]
  likes      Like[]
  vansHosted VanListing[] @relation("UserVans")
  rentals    Rental[]     @relation("UserRentals")
  products   Product[]
  orders     Order[]
  channels   Channel[]
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  text      String
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model Like {
  id     String @id @default(uuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

/**
 * -------- Van Rentals (Travel Hub) --------
 */

model VanListing {
  id          String   @id @default(uuid())
  hostId      String
  title       String
  description String?
  pricePerDay Decimal  @db.Decimal(10, 2)
  location    String
  imageUrls   String[] @db.Text
  createdAt   DateTime @default(now())

  host    User     @relation(name: "UserVans", fields: [hostId], references: [id])
  rentals Rental[]
}

model Rental {
  id         String       @id @default(uuid())
  renterId   String
  vanId      String
  startDate  DateTime
  endDate    DateTime
  totalPrice Decimal      @db.Decimal(10, 2)
  status     RentalStatus @default(PENDING)

  renter User       @relation(name: "UserRentals", fields: [renterId], references: [id])
  van    VanListing @relation(fields: [vanId], references: [id])
}

enum RentalStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

/**
 * -------- Marketplace --------
 */

model Product {
  id          String   @id @default(uuid())
  sellerId    String
  title       String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  category    String
  images      String[] @db.Text
  createdAt   DateTime @default(now())

  seller User        @relation(fields: [sellerId], references: [id])
  items  OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  buyerId   String
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(NEW)
  createdAt DateTime    @default(now())

  buyer User        @relation(fields: [buyerId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  NEW
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

/**
 * -------- Creator Channels --------
 */

model Channel {
  id          String   @id @default(uuid())
  ownerId     String
  title       String
  description String?
  createdAt   DateTime @default(now())

  owner  User    @relation(fields: [ownerId], references: [id])
  videos Video[]
}

model Video {
  id        String   @id @default(uuid())
  channelId String
  title     String
  url       String
  thumbnail String?
  views     Int      @default(0)
  createdAt DateTime @default(now())

  channel Channel @relation(fields: [channelId], references: [id])
}
